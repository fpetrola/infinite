# load environment vars from .env
set dotenv-load := true

# display this help
default:
  just --list

# build the api-server docker image
build:
  docker-compose build api

# publish the api-server docker image to docker.io
publish:
  docker login
  docker-compose push api

# start a local docker-based environment via docker-compose
start:
  docker-compose create
  docker-compose start

# stop the docker-compose environment
stop: 
  docker-compose stop

# cleatn the docker-compose environment
clean: clean-api clean-db


# populate local db - requires host networking, different db params.  require a
# create the initial database schema by invoking ./docker-scripts/migrate.sh conn_string 
#populate-db conn_string
#  echo {{conn_string}}
#  docker-compose run api-server ./docker-scripts/migrate.sh

# rebuild the api-server image & start the api
rebuild-api: build clean-api start-api

# stop and remove the api container
clean-api:
  docker-compose stop api
  docker-compose rm api

# create the api container
create-api:
  docker-compose create api

# start the api service
start-api: create-api
  docker-compose start api

# stop the environment and remove the database container
clean-db: 
  docker-compose stop db
  docker-compose rm db

# create the database container
create-db: 
  docker-compose create db

# start the database
start-db: create-db
  docker-compose start db

# populate a database container using the pg_dump file specified
populate-db dumpfile: start-db
  # copy appropriate file to docker container
  docker cp {{dumpfile}} api-server-db-1:/var/tmp/dumpfile
  docker-compose exec db sh -c 'sleep 4; pg_isready -q'
  # override PGHOST may be possible to use -e PGHOST to other database hosts to be updated
  docker-compose exec -e PGHOST db sh -c 'PGPASSWORD=$PGPASSWORD pg_restore --no-privileges --no-owner -h $PGHOST -v -d $PGDATABASE -U $PGUSER /var/tmp/dumpfile'
